<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Typora插入公式</title>
    <url>/2021/02/02/formula_in_Typora/</url>
    <content><![CDATA[<p>Typora中插入公式是基于LaTex排班系统的。关于LaTex，因为并不是所有的人都懂得专业的书籍及论文的排版，而这些排版的知识的学习成本极高。LaTex相较其而言，学习成本较低，可以让一些排版和程序设计的知识也可以能在几天、甚至几小时内生成很多具有书籍质量的印刷品。</p>
<p>对于生成复杂表格和数学公式，这一点表现得尤为突出。许多的公式编辑器也陆续支持LaTex，用途十分广泛。</p>
<p>关于LaTex的具体介绍，<a href="https://baike.baidu.com/item/LaTeX/1212106?fr=aladdin">详见百科</a>。以下介绍常用的公式排版，详细的全部公式排版见<a href="https://latexlive.com/help">LaTex帮助文档</a>。关于书籍以及论文的排版此处不讨论。</p>
<a id="more"></a>
<p>以下所有的公式都是基于    <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210203212848586.png" alt="image-20210203212848586">    或者    <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210203212858506.png" alt="image-20210203212858506">    的形式，因为Markdown语法中插入公式就是通过<code>美元符$</code>来实现的</p>
<h1 id="公式中的转义字符’-‘"><a href="#公式中的转义字符’-‘" class="headerlink" title="公式中的转义字符’\‘"></a>公式中的转义字符’\‘</h1><p>转义字符，和编程语言一样，是用来通过一些易记忆的命令来使得其能够展示符号效果</p>
<h2 id="1-一些常见的符号"><a href="#1-一些常见的符号" class="headerlink" title="1.一些常见的符号"></a>1.一些常见的符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">显示</th>
<th style="text-align:center">命令</th>
<th style="text-align:center">显示</th>
<th style="text-align:center">命令</th>
<th style="text-align:center">显示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\space</td>
<td style="text-align:center">空格</td>
<td style="text-align:center">\sum</td>
<td style="text-align:center">$\sum$</td>
<td style="text-align:center">\oiint</td>
<td style="text-align:center"><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210203205118408.png" alt="image-20210203205118408"></td>
</tr>
<tr>
<td style="text-align:center">\\</td>
<td style="text-align:center">换行</td>
<td style="text-align:center">\prod</td>
<td style="text-align:center">$\prod$</td>
<td style="text-align:center">\oiiint</td>
<td style="text-align:center"><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210203205137688.png" alt="image-20210203205137688"></td>
</tr>
<tr>
<td style="text-align:center">\and,\or,\not</td>
<td style="text-align:center"><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210203210252892.png" alt="image-20210203210252892"></td>
<td style="text-align:center">\partial</td>
<td style="text-align:center">$\partial$</td>
<td style="text-align:center">\%</td>
<td style="text-align:center">$\%$</td>
</tr>
<tr>
<td style="text-align:center">\exist</td>
<td style="text-align:center"><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210203205930278.png" alt="image-20210203205930278"></td>
<td style="text-align:center">\rm{d}</td>
<td style="text-align:center">$\rm{d}$</td>
<td style="text-align:center">\approx</td>
<td style="text-align:center">$\approx$</td>
</tr>
<tr>
<td style="text-align:center">\to</td>
<td style="text-align:center">$\to$</td>
<td style="text-align:center">a,b,\rm{a},\rm{b}···</td>
<td style="text-align:center">$a,b,\rm{a},\rm{b},\cdots$</td>
<td style="text-align:center">\leq</td>
<td style="text-align:center">$\leq$</td>
</tr>
<tr>
<td style="text-align:center">\neq</td>
<td style="text-align:center">$\neq$</td>
<td style="text-align:center">\nabla</td>
<td style="text-align:center">$\nabla$</td>
<td style="text-align:center">\geq</td>
<td style="text-align:center">$\geq$</td>
</tr>
<tr>
<td style="text-align:center">\infty,\+infty,\infty</td>
<td style="text-align:center">$\infty,+\infty,-\infty$</td>
<td style="text-align:center">\Delta</td>
<td style="text-align:center">$\Delta$</td>
<td style="text-align:center">\cdot</td>
<td style="text-align:center">$\cdot$</td>
</tr>
<tr>
<td style="text-align:center">\lim</td>
<td style="text-align:center">$\lim$</td>
<td style="text-align:center">\triangle</td>
<td style="text-align:center">$\triangle$</td>
<td style="text-align:center">\times</td>
<td style="text-align:center">$\times$</td>
</tr>
<tr>
<td style="text-align:center">\max</td>
<td style="text-align:center">$\max$</td>
<td style="text-align:center">\int,\iint,\iiint</td>
<td style="text-align:center">$\int,\iint,\iiint$</td>
<td style="text-align:center">\div</td>
<td style="text-align:center">$\div$</td>
</tr>
<tr>
<td style="text-align:center">\min</td>
<td style="text-align:center">$\min$</td>
<td style="text-align:center">\oint</td>
<td style="text-align:center">$\oint$</td>
<td style="text-align:center">\exp</td>
<td style="text-align:center">$\exp$</td>
</tr>
<tr>
<td style="text-align:center">\overline{Q}</td>
<td style="text-align:center">$\overline{Q}$</td>
<td style="text-align:center">\dots</td>
<td style="text-align:center">$\dots$</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">\underline{Q}</td>
<td style="text-align:center">$\underline{Q}$</td>
<td style="text-align:center">\cdots</td>
<td style="text-align:center">$\cdots$</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>此处只是列举一些符号，常用的公式符号下面一一展开。并且由于渲染引擎的问题，本文中一些公式使用了截图来显示效果。</p>
<h2 id="2-希腊字母"><a href="#2-希腊字母" class="headerlink" title="2.希腊字母"></a>2.希腊字母</h2><p>\字母发音，如下</p>
<script type="math/tex; mode=display">
\alpha,\beta,\gamma</script><p>附上一张希腊字母表，如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">小写</th>
<th style="text-align:left">LaTeX</th>
<th style="text-align:left">读音</th>
<th style="text-align:center">序号</th>
<th style="text-align:center">大写</th>
<th style="text-align:left">LaTeX</th>
<th style="text-align:left">读音</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">α</td>
<td style="text-align:left">\alpha</td>
<td style="text-align:left">/ˈælfə/</td>
<td style="text-align:center">31</td>
<td style="text-align:center">Γ</td>
<td style="text-align:left">\Gamma</td>
<td style="text-align:left">/ˈɡæmə/</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">β</td>
<td style="text-align:left">\beta</td>
<td style="text-align:left">/ˈbiːtə/, US: /ˈbeɪtə/</td>
<td style="text-align:center">32</td>
<td style="text-align:center">Δ</td>
<td style="text-align:left">\Delta</td>
<td style="text-align:left">/ˈdɛltə/</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">γ</td>
<td style="text-align:left">\gamma</td>
<td style="text-align:left">/ˈɡæmə/</td>
<td style="text-align:center">33</td>
<td style="text-align:center">Θ</td>
<td style="text-align:left">\Theta</td>
<td style="text-align:left">/ˈθiːtə/</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">δ</td>
<td style="text-align:left">\delta</td>
<td style="text-align:left">/ˈdɛltə/</td>
<td style="text-align:center">34</td>
<td style="text-align:center">Λ</td>
<td style="text-align:left">\Lambda</td>
<td style="text-align:left">/ˈlæmdə/</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">ϵ</td>
<td style="text-align:left">\epsilon</td>
<td style="text-align:left">/ˈɛpsɪlɒn/</td>
<td style="text-align:center">35</td>
<td style="text-align:center">Ξ</td>
<td style="text-align:left">\Xi</td>
<td style="text-align:left">/zaɪ, ksaɪ/</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">ε</td>
<td style="text-align:left">\varepsilon</td>
<td style="text-align:left">/ˈɛpsɪlɒn/</td>
<td style="text-align:center">36</td>
<td style="text-align:center">Π</td>
<td style="text-align:left">\Pi</td>
<td style="text-align:left">/paɪ/</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">ζ</td>
<td style="text-align:left">\zeta</td>
<td style="text-align:left">/ˈzeɪtə/</td>
<td style="text-align:center">37</td>
<td style="text-align:center">Σ</td>
<td style="text-align:left">\Sigma</td>
<td style="text-align:left">/ˈsɪɡmə/</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">η</td>
<td style="text-align:left">\eta</td>
<td style="text-align:left">/ˈeɪtə/</td>
<td style="text-align:center">38</td>
<td style="text-align:center">Υ</td>
<td style="text-align:left">\Upsilon</td>
<td style="text-align:left">/ˈʌpsɪlɒn/</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">θ</td>
<td style="text-align:left">\theta</td>
<td style="text-align:left">/ˈθiːtə/</td>
<td style="text-align:center">39</td>
<td style="text-align:center">Φ</td>
<td style="text-align:left">\Phi</td>
<td style="text-align:left">/faɪ/</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">ϑ</td>
<td style="text-align:left">\vartheta</td>
<td style="text-align:left">/ˈθiːtə/</td>
<td style="text-align:center">40</td>
<td style="text-align:center">Ψ</td>
<td style="text-align:left">\Psi</td>
<td style="text-align:left">/psaɪ/</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">ι</td>
<td style="text-align:left">\iota</td>
<td style="text-align:left">/aɪˈoʊtə/</td>
<td style="text-align:center">41</td>
<td style="text-align:center">Ω</td>
<td style="text-align:left">\Omega</td>
<td style="text-align:left">/oʊˈmeɪɡə/</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">κ</td>
<td style="text-align:left">\kappa</td>
<td style="text-align:left">/ˈkæpə/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">λ</td>
<td style="text-align:left">\lambda</td>
<td style="text-align:left">/ˈlæmdə/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">μ</td>
<td style="text-align:left">\mu</td>
<td style="text-align:left">/mjuː/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">ν</td>
<td style="text-align:left">\nu</td>
<td style="text-align:left">/njuː/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">ξ</td>
<td style="text-align:left">\xi</td>
<td style="text-align:left">/zaɪ, ksaɪ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">o</td>
<td style="text-align:left">o</td>
<td style="text-align:left">/ˈɒmɪkrɒn/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">π</td>
<td style="text-align:left">\pi</td>
<td style="text-align:left">/paɪ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">ϖ</td>
<td style="text-align:left">\varpi</td>
<td style="text-align:left">/paɪ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">ρ</td>
<td style="text-align:left">\rho</td>
<td style="text-align:left">/roʊ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">ϱ</td>
<td style="text-align:left">\varrho</td>
<td style="text-align:left">/roʊ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">σ</td>
<td style="text-align:left">\sigma</td>
<td style="text-align:left">/ˈsɪɡmə/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">ς</td>
<td style="text-align:left">\varsigma</td>
<td style="text-align:left">/ˈsɪɡmə/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">τ</td>
<td style="text-align:left">\tau</td>
<td style="text-align:left">/taʊ, tɔː/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">υ</td>
<td style="text-align:left">\upsilon</td>
<td style="text-align:left">/ˈʌpsɪlɒn/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">ϕ</td>
<td style="text-align:left">\phi</td>
<td style="text-align:left">/faɪ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td style="text-align:center">φ</td>
<td style="text-align:left">\varphi</td>
<td style="text-align:left">/faɪ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">χ</td>
<td style="text-align:left">\chi</td>
<td style="text-align:left">/kaɪ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td style="text-align:center">ψ</td>
<td style="text-align:left">\psi</td>
<td style="text-align:left">/psaɪ/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">ω</td>
<td style="text-align:left">\omega</td>
<td style="text-align:left">/oʊˈmeɪɡə/</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
<h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="1-根号"><a href="#1-根号" class="headerlink" title="1.根号"></a>1.根号</h2><p>格式：<code>\sqrt3</code>，如：$\sqrt3$；若开多次方：\sqrt[5]3，如：$\sqrt[5]3$</p>
<h2 id="2-分式"><a href="#2-分式" class="headerlink" title="2.分式"></a>2.分式</h2><p><code>frac&#123;3x&#125;&#123;2y&#125;</code>，如：$\frac{3x}{2}$</p>
<h2 id="3-上标和下标"><a href="#3-上标和下标" class="headerlink" title="3.上标和下标"></a>3.上标和下标</h2><p>此处以右上下标为例，正上下标到下一标题中的极限中统一讨论</p>
<p>右上标：<code>x^t</code>，如：$x^t$；右下标：<code>x_i</code>，如：$x_i$</p>
<p>当上下标多于一个字母或符号时，需要用{}将其括起来，即：<code>x^&#123;\alpha t&#125;,x_&#123;i1&#125;</code>，如：$x^{\alpha t},x_{i1}$</p>
<p>上下标组合：<code>a_1^2 + a_2^2 = a_3^2</code>，如：$ a_1^2 + a_2^2 = a_3^2 $</p>
<h2 id="4-极限"><a href="#4-极限" class="headerlink" title="4.极限"></a>4.极限</h2><p>1.插入行间公式：</p>
<p>${\lim_{x \to 0^+}}$</p>
<p>2.插入块间公式：</p>
<script type="math/tex; mode=display">
{\lim_{x \to 0^+}}</script><p>3.上述插入的行间公式和块间公式是一模一样的。但是由上述区别可以看出，在Typora中，若插入行间公式，则上下标显示在右下角和右上角；若插入块间公式，则上下标显示在正下方和正上方</p>
<p>4.若要移动行间和快件公式的上下标的位置，则在该字符 lim 与下标符 _ 中间添加： </p>
<ul>
<li><p>若要将行间公式的上下标强制移动到上下方（一般用于在行间公式中显示上下标），则添加<code>\limits</code>，如下</p>
<p>​    $\lim\limits_{x \to 0^+}$</p>
</li>
<li><p>若要将块间公式的上下标强制移动到右上下放，则添加 <code>\nolimits</code>（一般用于在行块间公式中显示右上下标），如下：</p>
</li>
</ul>
<script type="math/tex; mode=display">
{\lim \nolimits_{x \to 0^+}}</script><p>5.对于数学符号，要添加上下标，直接操作即可；对于非数学符号的普通符号如Math，若要对其添加上下标（一般是下标）则需要利用<code>\mathop&#123;Math&#125;</code>先将其转化为数学符号，再进行添加下标的操作：$\mathop{Math} \limits_{a \to \infty}$</p>
<p>6.几个经典极限如下</p>
<script type="math/tex; mode=display">
{\lim_{x \to 0}\frac{sinx}{x}=1}\\
{\lim_{x \to \infty}(1+\frac{1}{x})^x=e}\\
{\lim_{x \to 0}(1 + x)^{\frac{1}{x}}=e}\\</script><h2 id="5-积分"><a href="#5-积分" class="headerlink" title="5.积分"></a>5.积分</h2><p>格式：<code>\int_1^&#123;+ \infty&#125;</code>，如：$\int_1^{+ \infty}$</p>
<p>多重积分：<code>\iiint_1^&#123;n&#125;</code>，如：$\iiint_1^{n}$</p>
<p>闭合曲线积分：<code>\oint \limits_C</code>，如：$\oint \limits_C$</p>
<p>多重闭合曲积分：<code>\oiiint \limits_&#123;l&#125;</code>，如：<img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210203214856817.png" alt="image-20210203214856817"></p>
<h2 id="6-方程组、行列式、矩阵"><a href="#6-方程组、行列式、矩阵" class="headerlink" title="6.方程组、行列式、矩阵"></a>6.方程组、行列式、矩阵</h2><script type="math/tex; mode=display">
方程组：
\left\{
    \begin{array}{}
        a_1x+b_1y+c_1z=d_1\\
        a_2x+b_2y+c_2z=d_2\\
        a_3x+b_3y+c_3z=d_3
    \end{array}
\right.
\\
行列式：
\begin{vmatrix}
    1 &    2    & 3\\ 
    4 &    5    & 6\\ 
    7 &    8    & 9
\end{vmatrix}\\
矩阵：
\begin{matrix} {}
    1 &    2    & 3\\ 
    4 &    5    & 6\\ 
    7 &    8    & 9
\end{matrix}
\ or 
\begin{bmatrix} {}
    1 &    2    & 3\\ 
    4 &    5    & 6\\ 
    7 &    8    & 9
\end{bmatrix}
\ or 
\left(
\begin{array}{}
    1 &    2    & 3\\ 
    4 &    5    & 6\\ 
    7 &    8    & 9
\end{array}
\right)</script><h1 id="几个重要的公式"><a href="#几个重要的公式" class="headerlink" title="几个重要的公式"></a>几个重要的公式</h1><h2 id="1-双曲函数"><a href="#1-双曲函数" class="headerlink" title="1.双曲函数"></a>1.双曲函数</h2><script type="math/tex; mode=display">
双曲函数
\begin{cases}
双曲正弦函数：\sinh x = \frac{e^x - e^{-x}}{2}\\
双曲余弦函数：\cosh x = \frac{e^x + e^{-x}}{2}
\end{cases}，
满足：\cosh^2 x - \sinh^2 x =1</script><h2 id="2-欧拉公式"><a href="#2-欧拉公式" class="headerlink" title="2.欧拉公式"></a>2.欧拉公式</h2><script type="math/tex; mode=display">
欧拉公式
\begin{cases}
e^{ix} = \cos x + i\sin x \\
\sin x = \frac{e^{ix}-e^{-ix}}{2i}\\
\cos x = \frac{e^{ix}+e^{-ix}}{2}\\
\end{cases}\\
对比上述双曲函数，不难发现，在复数域，满足
\begin{cases}
\sin ix = -i\sinh x\\
\cos ix = \cosh x
\end{cases}</script><h2 id="3-积化和差、和差化积"><a href="#3-积化和差、和差化积" class="headerlink" title="3.积化和差、和差化积"></a>3.积化和差、和差化积</h2><script type="math/tex; mode=display">
积化和差公式
\begin{cases}
\sin x \cos y = \frac{1}{2}[\sin(x+y)+\sin(x-y)]\\
\cos x \cos y = \frac{1}{2}[\cos(x+y)+\cos(x-y)]\\
\sin x \sin y = \frac{1}{2}[\cos(x-y)-\cos(x+y)]
\end{cases}</script><script type="math/tex; mode=display">
和差化积公式
\begin{cases}
\sin x \pm \sin y = 2\sin\frac{x \pm y}{2} \cos\frac{x \mp y}{2}\\
\cos x + \cos y = 2\cos\frac{x + y}{2} \cos\frac{x - y}{2}\\
\cos x - \cos y = -2\sin\frac{x + y}{2} \sin\frac{x - y}{2}
\end{cases}</script><h2 id="4-正切函数"><a href="#4-正切函数" class="headerlink" title="4.正切函数"></a>4.正切函数</h2><script type="math/tex; mode=display">
\begin{cases}
\tan(x\pm y) = \frac{\tan x\pm\tan y}{1\mp\tan x\tan y}\\
\tan 2x = \frac{2\tan x}{1- \tan^2x}\\
\tan^2\frac{x}{2} = \frac{1-\cos x}{1+\cos x}
\end{cases}</script><h2 id="5-万能公式"><a href="#5-万能公式" class="headerlink" title="5.万能公式"></a>5.万能公式</h2><script type="math/tex; mode=display">
万能公式
\begin{cases}
\sin x = \frac{2\tan x}{1-\tan^2 x}\\
\cos x = \frac{1- \tan^2 \frac{x}{2}}{1+\tan^2 \frac{x}{2}}\\
\tan x = \frac{2\tan\frac{x}{2}}{1-\tan^2\frac{x}{2}}
\end{cases}</script><h2 id="6-三倍角公式"><a href="#6-三倍角公式" class="headerlink" title="6.三倍角公式"></a>6.三倍角公式</h2><script type="math/tex; mode=display">
三倍角公式
\begin{cases}
\sin 3x = 3\sin x - 4\sin^3 x\\
\cos 3x = 4\cos^3 x - 3\cos x
\end{cases}</script>]]></content>
      <tags>
        <tag>Typora</tag>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora使用</title>
    <url>/2021/02/02/Typora_usage/</url>
    <content><![CDATA[<p>说来惭愧，刚开始有记录学习和生活的想法的那一段时间，是通过<strong>Word</strong>。需要编辑公式的时候找个简单易上手的公式编辑器找半天，索性也就这样凑合过来了。虽说word功能十分强大，但是写博客的话有点不太对劲。过了大概一年左右，从一个朋友那看到了Typora这个软件，看到界面简洁，而且觉得比记事本稍微好看点，就下载了，只不过是像使用<strong>记事本</strong>一样记录生活。</p>
<p>直到去年疫情期间在家，某天闲得无聊，就开始折腾这个软件了，觉得挺有意思的，开始学习使用。起先发现有些功能涉及到HTML，于是又花了一些时间去大致了解一下HTML。经过多次谷歌、百度之后，掌握了一些常用的功能。这两天搭好了个人博客网站，把几篇之前写的文章都上传到网站上，此篇作为第一篇。</p>
<a id="more"></a>
<p>以下是我自己使用了一段时间Typora之后的总结。由于Typora是Markdown编辑器，所以其是支持HTML的，但是这里仅介绍其常用的几个文本编辑功能，其他的一些HTML语法的部分我了解的也不是很多，此处暂不介绍，以后有时间的话写博客记录一下常用的HTML语法。</p>
<h1 id="1-文章目录的创建"><a href="#1-文章目录的创建" class="headerlink" title="1.文章目录的创建"></a>1.文章目录的创建</h1><p>生成目录：在单独的一行输入[toc]或[TOC]然后回车，即可显示所有标题的目录（并且会根据后面是否继续生成标题而自动更新目录），由于目录一般都在开头，所以一般在文章第一行输入[toc]</p>
<h1 id="2-一些常用的文本渲染"><a href="#2-一些常用的文本渲染" class="headerlink" title="2.一些常用的文本渲染"></a>2.一些常用的文本渲染</h1><p>1.文本居中，通过HTML的标签（后面简称标签）：&lt;center&gt;要居中显示的内容&lt;/center&gt;，效果：</p>
<center>要居中显示的内容</center>

<p>2.文本添加删除线：~~这是要添加删除线的内容~~，效果：<del>这是要添加删除线的内容</del></p>
<p>3.文本添加下划线，设置粗体、斜体、粗斜体</p>
<p><u>这是一行带下划线的语句，选中需要添加下划线的文字，再通过Ctrl+U即可为选中的文本添加下划线；同样，也通过Ctrl+U来取消下划线，</u>也可通过标签的&lt;u&gt;添加下划线的内容&lt;/u&gt;</p>
<p>同理，<strong>Ctrl+B设置粗体/取消粗体</strong>，或者：**加粗内容**</p>
<p><em>Ctrl+I设置斜体/取消斜体，如：This is a italics font</em>，或者*斜体内容*</p>
<p><strong><em>Ctrl+I并且Ctrl+B设置加粗斜体，</em></strong>如：<strong><em>This is a bold and italics font</em></strong>，或者***加粗斜体内容***</p>
<p>4.添加分割线，在单独的一行输入三个或三个以上-或者*即可添加分割线，如下</p>
<hr>
<h1 id="3-导入图片"><a href="#3-导入图片" class="headerlink" title="3.导入图片"></a>3.导入图片</h1><p>通过 Ctrl+Shift+I （也可输入 ![图片说明](图片路径) 来实现）然后从文件目录中添加图片，如下</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/Penguim.jpg"  /></p>
<p>也可直接拖拽、复制粘贴过来，如下</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/Penguim.jpg" alt="Penguim"></p>
<p><strong>注意</strong>：在所有的Markdown编辑器插入图片，如果是从网上（如从别人博客中）粘贴的图片，尚且不会出现问题；但如果是本地图片，且没有使用图床，只有在自己的电脑查看时才能显示图片，上传md文件到博客时，访问者的终端上并没有该图片，所以会无法显示。此外，由该md文件导出的其他格式文件中也无法显示图片，即显示:<img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202205311268.png" alt="image-20210202205311268">。因此需要使用图床（即储存图片的服务器），将其上传到服务器中，访问者便能将该图片从服务器中下载缓存到终端上。其实，从网上粘贴的图片也是存在服务器中，访问者访问时终端缓存下载，所以不用图床用户也可以查看。</p>
<h1 id="4-添加超链接"><a href="#4-添加超链接" class="headerlink" title="4.添加超链接"></a>4.添加超链接</h1><p>超链接（Markdown编辑器及导出的文本文档中 Ctrl+左键 访问，导出的html和pdf中直接点击即可访问）</p>
<p>1.&lt;&gt;中输入网址（必须加上<a href="http://），如：">http://），如：</a><a href="http://www.baidu.com">http://www.baidu.com</a></p>
<p>2.快捷键Ctrl+K，或者<code>[不会就百度](http://www.baidu.com)</code>，[]中添加说明内容，()中输入网址，效果：<a href="http://www.baidu.com">不会就百度</a></p>
<h1 id="5-列表和表格"><a href="#5-列表和表格" class="headerlink" title="5.列表和表格"></a>5.列表和表格</h1><h2 id="5-1列表"><a href="#5-1列表" class="headerlink" title="5.1列表"></a>5.1列表</h2><h3 id="5-1-1无序列表"><a href="#5-1-1无序列表" class="headerlink" title="5.1.1无序列表"></a>5.1.1无序列表</h3><p>在单独的一行输入 *+空格，或者 -空格，或者++空格，如下</p>
<ul>
<li>这是用*创建的列表</li>
</ul>
<ul>
<li>这是用-创建的列表</li>
</ul>
<ul>
<li>这是用+创建的列表</li>
</ul>
<ul>
<li>无序列表1</li>
<li>无序列表2（在列表后输入 Tab 即可降级，Shift + Tab 降级，如下）<ul>
<li>无序列表3<ul>
<li>无序列表4<ul>
<li>有序列表5</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>也可使用Ctrl+Shift+]  对选中的文本所在段落生成无序列表</p>
<h3 id="5-1-2有序列表"><a href="#5-1-2有序列表" class="headerlink" title="5.1.2有序列表"></a>5.1.2有序列表</h3><p>在单独的一行输入 数字+.+空格，如下</p>
<ol>
<li>有序列表1</li>
<li>有序列表2（在列表后输入 Tab 即可降级，Shift + Tab 降级，如下）<ol>
<li>有序列表3<ol>
<li>有序列表4<ol>
<li>有序列表5</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>也可使用 Ctrl+Shift+[  对选中的文本所在段落生成有序列表</p>
<h3 id="5-1-3任务列表（不常用）"><a href="#5-1-3任务列表（不常用）" class="headerlink" title="5.1.3任务列表（不常用）"></a>5.1.3任务列表（不常用）</h3><p>在单独一行输入    -空格[空格]空格（在列表后输入 Tab 即可降级，Shift + Tab 降级，如下）</p>
<ul>
<li>[x] 吃饭<ul>
<li>[x] 早上吃啥</li>
<li>[x] 中午吃啥</li>
<li>[x] 晚上吃啥</li>
</ul>
</li>
<li>[x] 睡觉<ul>
<li>[ ] 早上几点起</li>
<li>[x] 晚上几点睡</li>
</ul>
</li>
<li>[ ] 打豆豆<ul>
<li>[x] 我是一个无情的点赞机器</li>
</ul>
</li>
</ul>
<p>由于Hexo的Markdown渲染引擎与Typora不同，所以这里显示不出来，特此截图</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202212546261.png" alt="image-20210202212546261"></p>
<p>综上，Typora中，列表均可通过Tab和Shift+Tab来对列表进行升级和降级操作</p>
<h2 id="5-2表格"><a href="#5-2表格" class="headerlink" title="5.2表格"></a>5.2表格</h2><ul>
<li>快捷键Ctrl+T，然后设置行列即生成表格</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">姓名</th>
<th style="text-align:center">年龄</th>
<th style="text-align:center">性别</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">张三</td>
<td style="text-align:center">1</td>
<td style="text-align:center">男</td>
</tr>
<tr>
<td style="text-align:center">李四</td>
<td style="text-align:center">2</td>
<td style="text-align:center">女</td>
</tr>
<tr>
<td style="text-align:center">王二麻子</td>
<td style="text-align:center">3</td>
<td style="text-align:center">其他</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">张麻子</td>
<td style="text-align:center">4</td>
<td style="text-align:center">你猜</td>
</tr>
<tr>
<td style="text-align:center">黄鹤</td>
<td style="text-align:center">已跑路，不详</td>
<td style="text-align:center">你再猜</td>
</tr>
</tbody>
</table>
</div>
<p>  在表格中任意位置按下 Ctrl+回车 在该行与下行之间新建一行</p>
<ul>
<li>在单独的一行输入|姓名|年龄|性别|，然后回车，生成表格</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">年龄</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">性别</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">同上</td>
<td style="text-align:center">同上</td>
<td style="text-align:center">同上</td>
</tr>
</tbody>
</table>
</div>
<h1 id="6-引用"><a href="#6-引用" class="headerlink" title="6.引用"></a>6.引用</h1><p>引用名言，现也用来作为文章的前言，在单独的一行输入 &gt;+空格（或者Ctrl+Shift+Q），如下</p>
<blockquote>
<p>这是第一个引用的第一行</p>
<p>这是第一个引用的第二行</p>
<blockquote>
<p>引用嵌套</p>
<blockquote>
<p>引用再嵌套</p>
</blockquote>
</blockquote>
<p>这是第二个引用中的第一行</p>
<p><em>这是一句斜体</em></p>
<p><strong>这是一句粗体</strong></p>
<p><strong><em>这是一句粗斜体</em></strong></p>
</blockquote>
<h1 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7.脚注"></a>7.脚注</h1><p>类似书中对一些内容作一些详尽的解释，一般把解释写在文章末尾，格式：脚注[^数字]，如下</p>
<p>饮中八仙歌<sup><a href="#fn_1" id="reffn_1">1</a></sup></p>
<p>脚注<sup><a href="#fn_2" id="reffn_2">2</a></sup></p>
<p>注释<sup><a href="#fn_3" id="reffn_3">3</a></sup></p>
<h1 id="8-脚标"><a href="#8-脚标" class="headerlink" title="8.脚标"></a>8.脚标</h1><p>上脚标：<code>x^2^</code> ；下脚标：<code>H~2~O</code></p>
<p>同<code>5.1.3任务列表</code>一样的问题，此处效果无法显示，特此截图：<img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202225535284.png" alt="image-20210202225535284"></p>
<h1 id="9-行内代码和代码块"><a href="#9-行内代码和代码块" class="headerlink" title="9.行内代码和代码块"></a>9.行内代码和代码块</h1><h2 id="9-1行内代码"><a href="#9-1行内代码" class="headerlink" title="9.1行内代码"></a>9.1行内代码</h2><p>对于简单的一句代码或者需要强调显示的文本（本文中不能显示的格式正是用代码块来显示的），格式：<code>code or text</code>（或者选中内容，Ctrl+Shift+`），如下</p>
<p><code>printf(&quot;笨鸟先飞&quot;);</code>    <code>笨鸟先飞</code>    <code>前文也引用了</code></p>
<h2 id="9-2代码块"><a href="#9-2代码块" class="headerlink" title="9.2代码块"></a>9.2代码块</h2><p>```+编程语言名字（或者Ctrl+Shift+K），如C和JAVA（若没有补加语言说明，则代码不会显示高亮），然后在代码块中输入源码，如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, World!!!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="10-插入公式"><a href="#10-插入公式" class="headerlink" title="10.插入公式"></a>10.插入公式</h1><p>Typora中插入公式是基于LaTex排版系统的，下面仅作了解，具体的一些常用公式的排版见<a href="https://zhenyoung.github.io/2021/02/02/Typora%E6%8F%92%E5%85%A5%E5%85%AC%E5%BC%8F/">Typora插入公式</a></p>
<h2 id="10-1插入行间公式"><a href="#10-1插入行间公式" class="headerlink" title="10.1插入行间公式"></a>10.1插入行间公式</h2><p>Ctrl+Shift+M 或者 $$+回车，如下</p>
<script type="math/tex; mode=display">
y=x^2\\
\vec{a},\vec{c}\\
\frac{1}{2}\\
\alpha,\beta,\theta,\zeta\\</script><p>这个行间公式是单独显示的，而且默认居中对齐，</p>
<h2 id="10-2插入块间公式"><a href="#10-2插入块间公式" class="headerlink" title="10.2插入块间公式"></a>10.2插入块间公式</h2><p><script type="math/tex">公式</script>，如：$y=x^2$，块间公式是可以在任意位置嵌入的，不能像行间公式那样单独显示</p>
<h1 id="11-表情"><a href="#11-表情" class="headerlink" title="11.表情"></a>11.表情</h1><p>:单词:，仅支持部分表情，具体可查看官方文档</p>
<p>同<code>5.1.3任务列表</code>一样的问题，此处效果无法显示，特此截图：<img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202215523813.png" alt="image-20210202215523813"></p>
<h1 id="12-脚注解释"><a href="#12-脚注解释" class="headerlink" title="12.脚注解释"></a>12.脚注解释</h1><p>[^数字]:解释</p>
<p>同<code>5.1.3任务列表</code>一样的问题，此处效果无法显示，特此截图：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202220715217.png" alt="image-20210202220715217"></p>
]]></content>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>码制的一些问题</title>
    <url>/2021/02/02/complement/</url>
    <content><![CDATA[<p>以前上课的时候，经常听见老师将补码的问题，很多门课的老师也会反复说码制之间的转换。但是，+0和-0的问题只是一笔带过。平时也很少遇到这种问题，而我自己又懒，就没有深究。现在想来，懒真的才是万恶之源。最近有空，便仔细想了这个问题，百度之后了解了这个问题。顺便把补码的几种求解方法列举了下来。特此，写篇博客记录下来。</p>
<a id="more"></a>
<h1 id="0和-0的问题"><a href="#0和-0的问题" class="headerlink" title="+0和-0的问题"></a>+0和-0的问题</h1><p>当使用8位二进制来表示-128~127时，</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202232615462.png" alt="image-20210202232615462"></p>
<p>不难发现，+0和-0的补码是相同的，即2个补码表示同一个数 “0”，因此若不作相应的规定，那么8位补码所能表示的数只有-127~127共255个（注：8位原码范围：-127~-0, +0~127；8位反码范围：同左），而8位本应该能表示256个数，为此，便做了如下规定：</p>
<p><strong>规定：1000 0000（作为补码）表示-128，且-128仅有补码（1000 0000）而没有对应的反码、原码，因此不能根据-128的补码去反推其原码和反码</strong></p>
<h1 id="求解补码的方法"><a href="#求解补码的方法" class="headerlink" title="求解补码的方法"></a>求解补码的方法</h1><p>1.口诀：符号位不变，各位取反，末位加1（有进位则依次进位）</p>
<p>2.将最高位的1和最低位的1之间的数取反，其余不变                 注：若只有一个1，则按照方法1或方法3来</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202232645268.png" alt="image-20210202232645268"></p>
<p>3.按照补码的定义，负数的补码，定义如下：</p>
<p>​    <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210202232730990.png" alt="image-20210202232730990"></p>
]]></content>
      <tags>
        <tag>doubt</tag>
      </tags>
  </entry>
  <entry>
    <title>自然底数e的由来</title>
    <url>/2021/02/02/origin_of_e/</url>
    <content><![CDATA[<p>与圆周率$\pi$一样，自然底数e是一个常数。然而自从知道e开始，就只记得其大致的值为2.71828182845…，却不知其从何而来，这个数有什么意义。</p>
<p>直到一天我在图书馆无意中翻看到一本关于物理学史的书时，发现上面大致介绍了一下这个常数的由来，特此写一篇博客记录。</p>
<a id="more"></a>
<p>首先，e 这个表示自然底数的符号是由瑞士数学和物理学家Leonhard Euler(莱昂哈德·欧拉)命名的，取的正是Euler的首字母“ <img src="https://www.zhihu.com/equation?tex=e" alt="[公式]"> ”</p>
<p>但实际上，第一个发现这个常数的，并非欧拉本人，而是<strong>雅可比·伯努利</strong>（Jacob Bernoulli）（提出雅各比公式的那位），伯努利家族是17〜18世纪瑞士的一个赫赫有名的家族，其中出了很多著名的数理科学家，雅可比·伯努利是<strong>约翰·伯努利</strong>（Johann Bernoulli）的哥哥，而约翰·伯努利则是欧拉的数学老师。</p>
<p>步入正题。我们知道，很多细菌是通过二分裂进行繁殖的，假设某种细菌1天会分裂1次，也就是 1 个增长周期为1天，这意味着：<strong>每一天，细菌的总数量都是前一天的两倍</strong>。<br>不难得出：1个细菌分裂$x$天后，细菌总数为$2^x$，那么$K$个细菌分裂$x$天后细菌总数为$Q=K\cdot2^x$</p>
<p>如果将 “<strong>分裂</strong>”或“<strong>翻倍</strong>”换一种更文艺的说法，也可以说是：“<strong>增长率为$100\%$</strong> ”。也就是说，可以将上式写为：$(1+100\%)^x$，然而当增长率不是100%，而是50%、25%之类的时候，则需要将上式的100%更换即可。如此一来，便可得到适用于其他类似增长事物的普适的公式：</p>
<script type="math/tex; mode=display">
Q=(1+r)^x</script><p>这个公式的数学内涵是：一个增长周期内的增长率为 $r$ ，在增长了 $x$ 个周期之后，总数也将为初始量的 $Q$ 倍。</p>
<p>以上为指数增长的一个简单实例，下面来看看雅可比·伯努利的发现：</p>
<p>假如你有1元钱存在银行中，而银行的利率飙升到了100%（理想情况，姑且认为是严重的通货膨胀吧），若银行一年付一次利息，则一年后你可以拿到1元的本金和1元的利息，总共2元。</p>
<p>现在银行的年利率不变，但是为了招揽客户，推出每半年就付一次利息（年利率还是100%，只不过一半时间内付一半的利息）的政策，那么在六个月后，你就能拿到1元的本金和0.5元的利息，总共1.5元，若不取出，而是继续存入银行中产生利息（俗称利滚利，专业术语称<strong>复利</strong>），那么再过六个月，存款将为2.25元。可用如下公式模拟：</p>
<script type="math/tex; mode=display">
Q=(1+\frac{100\%}{2})^2</script><p>继续，假设现在银行为了和其他银行抢生意，短期不想赚钱了，每四个月就付一次利息！而机智的你依然不取出而是继续存，与半年结算一次利息类似：即，每个结算周期为四个月，每四个月的利率是$\frac{100\%}{3}$，用如下公式模拟：</p>
<script type="math/tex; mode=display">
Q=(1+\frac{100\%}{3})^3\approx2.37037</script><p>不难发现，年利率虽然没变，但是随着每年利息交付次数的增加（按照时间每隔一段时间就付之以相对应时间占比的利率，如半年50%，四个月33.33%，三个月25%等），能从银行拿到的钱也在增加。随着交付次数的不断增加，当其趋于无穷时（即相当于每时每刻都在交付利息），经过不断计算发现，其最终的值趋于一个常数2.71828182845…，将其用字母 e 来定义，即得以下极限</p>
<script type="math/tex; mode=display">
e=\lim_{n \to \infty}(1+\frac{1}{n})^n\\
此处的\infty默认为+\infty</script><p>然而，实际上银行的利率永远也不会超过100%（银行不做慈善），此外，有些事物的增长率是超过100%甚至是远超的。若将100%用变量x代替，便可得到满足所有自然增长事物的增长规律。以下是推导过程：</p>
<script type="math/tex; mode=display">
e=\lim_{n \to \infty}(1+\frac{1}{n})^n=\lim_{n \to \infty}(1+\frac{1}{\frac{n}{x}})^\frac{n}{x}=\lim_{n \to \infty}(1+\frac{x}{n})^\frac{n}{x}\\
不难发现，e^x=\lim_{n \to \infty}((1+\frac{x}{n})^\frac{n}{x})^x\\
\qquad\qquad\ \ \ =\lim_{n \to \infty}(1+\frac{x}{n})^n</script><p>由此便将式中的100%用 x 代替，便可表征所有自然增长的规律（ x代表增长率，既可能大于1，也可能小于1，甚至可能小于0（亏损、减少））</p>
<p>有了自然之数，便有了其他底数为底的指数函数</p>
]]></content>
      <tags>
        <tag>doubt</tag>
      </tags>
  </entry>
  <entry>
    <title>将进酒</title>
    <url>/2021/02/03/poem1/</url>
    <content><![CDATA[<p>终于把博客网站部署好了！！！从一个小白也算有了自己的网站，特此背诵一首李白的《将进酒》留作以后纪念😄</p>
<a id="more"></a>
<center>将进酒</center>

<p><center>君不见，黄河之水天上来，奔流到海不复回。</p>
<p><center>君不见，高堂明镜悲白发，朝如青丝暮成雪。</p>
<p><center>人生得意须尽欢，莫使金樽空对月。</p>
<p><center>天生我才必有用，千金散尽还复来。</p>
<p><center>烹羊宰牛且为乐，会须一饮三百杯。</p>
<p><center>岑夫子，丹丘生，将进酒，杯莫停。</p>
<p><center>与君歌一曲，请君为我倾耳听。</p>
<p><center>钟鼓馔玉不足贵，但愿长醉不复醒。</p>
<p><center>古来圣贤皆寂寞 ，惟有饮者留其名。</p>
<p><center>陈王昔时宴平乐，斗酒十恣欢谑。</p>
<p><center>主人何为言少钱，径须沽取对君酌。</p>
<p><center>五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。</p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
  <entry>
    <title>这个博客能够带走和留下什么</title>
    <url>/2021/02/02/%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2%E8%83%BD%E5%A4%9F%E5%B8%A6%E8%B5%B0%E5%92%8C%E7%95%99%E4%B8%8B%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p><center>1.从我自己的角度，看看<b>社会和世界的样子</b></center></p>

<p><center>2.从我的博客中，看到自己<b>看待问题的思路</b></center></p>

<p><center>3.记录生活的点点滴滴，<b>热爱生活</b></center></p>

<a id="more"></a>
<p>我为什么写博客？</p>
<p>1.记录以后可能会用得到的东西（教程，心得，总结等）</p>
<p>2.记录每天的生活和想法，热爱生活</p>
<p>3.供多年以后追念</p>
]]></content>
  </entry>
  <entry>
    <title>Git命令</title>
    <url>/2021/02/02/Git_commands/</url>
    <content><![CDATA[<p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，是Linus（Linux之父）为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>
<p>由于我目前正在学习使用阶段，使用Git也仅限于保存学习过程中的代码，或者给一些文件用作备份，所以以下有一些未介绍的地方，以后补充。</p>
<a id="more"></a>
<h1 id="1-Git入门"><a href="#1-Git入门" class="headerlink" title="1.Git入门"></a>1.Git入门</h1><h2 id="1-1安装Git"><a href="#1-1安装Git" class="headerlink" title="1.1安装Git"></a>1.1安装Git</h2><ul>
<li><p>Windows</p>
<p>在官网下载Git最新版本后，安装。然后在命令窗口输入以下命令</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台PC上所有的Git仓库都会使用这个配置</p>
</li>
<li><p>Mac OS X</p>
<p>就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装。需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了</p>
</li>
<li><p>Linux（Ubuntu）</p>
<p>在终端中输入<code>sudo apt-get install git</code>即可完成安装</p>
</li>
</ul>
<h2 id="1-2创建版本库"><a href="#1-2创建版本库" class="headerlink" title="1.2创建版本库"></a>1.2创建版本库</h2><p>版本库又名仓库（repository），可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”</p>
<p>所以，创建一个版本库十分简单。</p>
<p>首先在一个合适的地方创建一个空目录，然后进入该目录，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124134101593.png" alt="image-20210124134101593"></p>
<p>当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，不要随意更改目录中的内容</p>
<p>如果没有看到<code>.git</code>目录，那是因为它默认是隐藏的，用<code>ls -ah</code>命令就可以看见</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124163457340.png" alt="image-20210124134647313"></p>
<ul>
<li><p>将文件添加到版本库（仓库）</p>
<p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪 文本文件 的改动，比如txt文件、网页、所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。使用版本控制系统时要以纯文本方式编写文件。</p>
<p>此外，千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件，原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件。他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。故下载Notepad++代替记事本，记得把Notepad++的默认编码设置为UTF-8 without BOM</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，建议使用UTF-8编码，被所有平台所支持</p>
<p>在git1目录下新建一个readme.txt文件（子目录下新建也可），内容如下</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Nobody knows China better than <span class="keyword">me</span>.</span><br><span class="line">It<span class="comment">&#x27;s a fake news.</span></span><br><span class="line">没人能在法国投降之前占领巴黎。</span><br></pre></td></tr></table></figure>
<p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p>
<ul>
<li><p>第一步：用命令<code>git add</code>把文件添加到仓库</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> readme.txt</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二步：用命令<code>git commit</code>把文件提交到仓库</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">&quot;first commit&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124155134395.png" alt="image-20210124142530752"></p>
</li>
</ul>
<p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，这样你就能从历史记录里方便地找到改动记录</p>
<p><code>1 file changed</code>说明1个文件被改动（我们新添加的readme.txt文件）</p>
<p><code>3 insertions</code>说明插入了3行内容（readme.txt有3行内容）。</p>
<p>可以多次<code>add</code>不同的文件，最后一次性全部提交，比如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> file1.txt</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> file2.txt file3.txt</span></span><br><span class="line">git commit -m <span class="string">&quot;add 3 files.&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意事项</p>
<p>Git命令必须在Git仓库目录内执行（<code>git init</code>除外），在仓库目录外执行是没有意义的</p>
<p>添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名</p>
</li>
</ul>
<h2 id="1-3总结"><a href="#1-3总结" class="headerlink" title="1.3总结"></a>1.3总结</h2><p>初始化一个Git仓库，使用<code>git init</code>命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<p>1.使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件</p>
<p>2.使用命令<code>git commit -m &lt;message&gt;</code>，提交</p>
<h1 id="2-时光机穿梭"><a href="#2-时光机穿梭" class="headerlink" title="2.时光机穿梭"></a>2.时光机穿梭</h1><h2 id="2-1修改文件"><a href="#2-1修改文件" class="headerlink" title="2.1修改文件"></a>2.1修改文件</h2><ul>
<li><p>修改readme.txt文件，用命令<code>git status</code>查看结果：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124142530752.png" alt="image-20210124155134395"></p>
<p>上述输出结果告诉我们：readme.txt`被修改过了，但还没有提交</p>
</li>
</ul>
<p>  若要查看修改的内容，则用命令<code>git diff readme.txt</code>：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124134647313.png" alt="image-20210124163457340"></p>
<p>  输出结果说明修改的内容为：</p>
<p>  将“没人能在法国头像之前占领巴黎。” 改为 “没人能在法国头像之前占领巴黎”</p>
<p>  若继续改动，在上一次修改的基础上将前两句的句号也都删除：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124174929199.png" alt="image-20210124173804691"></p>
<p>  可以发现，之前的修改并没有在保存到仓库中</p>
<p>  再修改一次，将首字母改为小写：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124173804691.png" alt="image-20210124174549168"></p>
<p>  可以看到，之前的修改仍然没有保存</p>
<p>  此时，将修改添加到仓库后查看仓库当前状态：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124174549168.png" alt="image-20210124174929199"></p>
<p>  可以看到，<code>changes to be committed</code>说明将要被提交的修改包括<code>readme.txt</code></p>
<p>  提交之后，再查看仓库状态：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124185500264.png" alt="image-20210124175611550"></p>
<p>​    Git告诉我们当前没有需要提交的修改，而且工作目录干净（working tree clean）</p>
<ul>
<li><p>总结</p>
<p>1.要随时掌握工作区的状态，使用<code>git status</code>命令</p>
<p>2.如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容</p>
</li>
</ul>
<h2 id="2-2版本回退"><a href="#2-2版本回退" class="headerlink" title="2.2版本回退"></a>2.2版本回退</h2><ul>
<li><p>首先，用<code>git log</code>命令查看提交（commit）的历史记录：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124175611550.png" alt="image-20210124183017705"></p>
<p>我们可以看到有2次提交，其中<code>first commit</code>和<code>second commit</code>是提交时加上的说明，当前仓库所处的状态是第2次提交之后的状态，若觉得容易眼花缭乱，可以加上<code>--pretty=oneline</code>参数：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124183017705.png" alt="image-20210124183720437"></p>
<p>在Git中，<code>HEAD</code>表示当前版本，上一个版本是<code>HEAD</code>\^，上上个版本是<code>HEAD</code>\^\^，上上上个版本是<code>HEAD</code>\^\^\^，前n个版本是<code>HEAD</code>~n</p>
</li>
<li><p>将当前版本（second commit）回退到上一个版本（first commit），用<code>reset</code>命令：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124183720437.png" alt="image-20210124185500264"></p>
<p><code>--hard</code>参数以后再说，现在先使用。结果显示当前版本的版本号<code>commit id</code>与第1次提交时的版本号一致，说明回退到了上一个版本。</p>
<p>如果不相信，可以通过<code>cat readme.txt</code>命令查看文件信息（cat命令是直接查看文件信息内容的）：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124190329356.png" alt="image-20210124185859799"></p>
<p>可以看到，此时<code>readme.txt</code>文件的内容与第1次提交时的一致，说明真的回退到了第1个版本</p>
</li>
</ul>
<p>  此时再查看仓库的状态：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124191403893.png" alt="image-20210124190329356"></p>
<p>   发现<code>second commit</code>版本已经消失不见了 。若想回到最新的版本<code>second commit</code>，则只要命令窗口没有关掉，就可以顺着窗口找到<code>second commit</code>版本的<code>commit id</code>，然后通过命令<code>git reset --hard 8e381</code>回退到之后的版本（版本号写前几位即可，Git会自己去找。当然了，也不能只写前一两位）。此时查看<code>readme.txt</code>的内容：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124185859799.png" alt="image-20210124191403893"></p>
<p>  可以看到，成功回退到了<code>second commit</code>版本。而且回退速度非常快，因为Git内部有个指向当前版本的<code>HEAD</code>指针。回退版本的时候，Git仅仅是将<code>HEAD</code>指针由指向<code>first commit</code>改为指向<code>second commit</code>，然后顺便把工作区的文件更新了，所以使<code>HEAD</code>指向哪个版本，就把当前版本定位在哪。</p>
<p>  然而如果窗口关掉了，那么再次打开Git Bash使用命令<code>git log</code>便看不到<code>second commit</code>版本的id号，自然也就无法回退版本了。此时可以用命令<code>git reflog</code>查看命令历史（记录每一次改变<code>HEAD</code>的命令），此处可以看到每次提交的版本号：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124194758839.png" alt="image-20210124194758839"></p>
<ul>
<li><p>总结</p>
<p>1.<code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code></p>
<p>2.穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本</p>
<p>3.要重返未来，用<code>git reflog</code>查看改变<code>HEAD</code>的命令历史，以便确定要回到未来的哪个版本</p>
</li>
</ul>
<h2 id="2-3工作区和暂存区"><a href="#2-3工作区和暂存区" class="headerlink" title="2.3工作区和暂存区"></a>2.3工作区和暂存区</h2><ul>
<li><p>工作区（Working Directory）</p>
<p>即在PC中能看到的目录，比如在我桌面上的git1文件夹就是一个工作区</p>
</li>
<li><p>版本库/仓库（Repository）</p>
<p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及 指向<code>master</code>的一个指针 叫<code>HEAD</code>。分支和<code>HEAD</code>的概念以后再说</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/0.jpg"  /></p>
<p><code>git add</code>把文件添加进版本库，实际上就是把文件修改添加到暂存区</p>
<p><code>git commit</code>提交更改，实际上就是把暂存区的 所有内容 提交到当前分支</p>
<p>因为创建Git版本库时，Git自动为我们创建了唯一1个<code>master</code>分支，所以现在<code>git commit</code>就是往<code>master</code>分支上提交更改</p>
<p>可以简单理解为：需要提交的文件及修改通通放到暂存区，然后，一次性提交暂存区的所有修改</p>
</li>
<li><p>在<code>git1</code>目录下新建一个LICENSE文件，内容随便写；然后修改<code>readme.txt</code>文件：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124213528065.png" alt="image-20210124213528065"></p>
<p>Git非常清楚地说明了：<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code></p>
</li>
</ul>
<p>  现在，使用命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124213644358.png" alt="image-20210124213644358"></p>
<p>  现在，暂存区的状态就变成了：</p>
<p>  <img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124213813600.png"></p>
<p>  一旦提交后，如果又没有对工作区做任何修改，那么工作区就是“干净”的：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/1.jpg" alt="image-20210124213813600"></p>
<p>  现在版本库中暂存区就没有任何内容了：</p>
<p>  <img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/2.jpg"></p>
<ul>
<li><p>总结</p>
<p>Git的暂存区十分重要</p>
</li>
</ul>
<h2 id="2-4管理修改"><a href="#2-4管理修改" class="headerlink" title="2.4管理修改"></a>2.4管理修改</h2><ul>
<li><p>Git追踪的并不是文件，而是修改</p>
<p>在文件中增加一行<code>年轻人不讲武德。</code>，然后添加，然后再次修改将其句号删掉，然后提交，查看状态：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124220836695.png" alt="image-20210124220836695"></p>
<p>可以发现，第2次的修改即删除句号没有被提交</p>
<p>整理一下过程：第1次修改 -&gt; <code>git add</code> -&gt; 第2次修改 -&gt; <code>git commit</code></p>
<p>其实，Git管理的是修改，当用<code>git add</code>命令后，工作区的第1次修改被放入暂存区，准备提交，但是，工作区的第2次修改并没有放入暂存区。所以<code>git commit</code>只负责把暂存区的修改（即第1次的修改）提交了，第2次的修改由于没有添加进暂存区，不会被提交</p>
<p>提交后，用<code>git diff</code>HEAD<code>-- readme.txt</code>命令可以查看 工作区（绿字） 与 版本库中的最新版本（红字） 之间的区别：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124221534325.png" alt="image-20210124221534325"></p>
<p>可见，第2次修改确实没有被提交</p>
<p>若想提交第2次修改，则只需将其添加，然后再提交即可：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124222059271.png" alt="image-20210124222059271"></p>
<p>可以看到，添加再提交后，工作区与版本库之间没有区别，所以用<code>git diff</code>HEAD<code>-- readme.txt</code>命令时没有显示（Unix的哲学即为“没有消息就是好消息”）</p>
</li>
<li><p>总结</p>
<p>每次修改文件，如果不用<code>git add</code>到暂存区，那么就不会加入到<code>commit</code>中</p>
</li>
</ul>
<h2 id="2-5撤销修改"><a href="#2-5撤销修改" class="headerlink" title="2.5撤销修改"></a>2.5撤销修改</h2><ul>
<li><p>工作区改乱了文件的内容（修改如下），但是修改之后的文件没有添加到暂存区</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124225508963.png" alt="image-20210124225508963"></p>
<p>若想直接丢弃工作区的修改，可以通过编辑文件手动修改，也可通过命令<code>git checkout -- file</code></p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124224317826.png" alt="image-20210124224317826"></p>
<p>命令<code>git checkout -- readme.txt</code>把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<ul>
<li><p><code>readme.txt</code>修改后没有添加到暂存区，此时，撤销修改就回到和版本库一模一样的状态</p>
</li>
<li><p><code>readme.txt</code>添加到了暂存区，工作区的文件又做了修改，此时，撤销修改就回到添加到暂存区后的状态</p>
</li>
</ul>
<p>总之，命令<code>git checkout -- readme.txt</code>将使这个文件回退到最近一次<code>git commit</code>或<code>git add</code>时的状态</p>
<p>此外，<code>git checkout -- readme.txt</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令。此处不深究，分支管理中再细说</p>
</li>
<li><p>工作区改乱了文件的内容（修改如下），而且修改之后的文件还添加到了暂存区中</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124225410528.png" alt="image-20210124225410528"></p>
<p>若想直接丢弃暂存区，也可通过命令<code>git reset</code>HEAD<code>readme.txt</code>把暂存区的修改撤销掉（unstage），重新放回工作区，然后重复第一步即可</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124232241633.png" alt="image-20210124230438521"></p>
<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区，当使用<code>HEAD</code>时，表示最新的版本</p>
</li>
<li><p>已经将修改提交到版本库时，想要撤销本次提交，只能通过版本回退来修改版本（不过前提是没有推送到远程库）</p>
</li>
<li><p>总结</p>
<p>1.场景1：当改乱工作区某个文件的内容，但没有添加到暂存区时，想要直接丢弃工作区的修改时，用命令<code>git chekout -- file</code></p>
<p>2.场景2：当不但改乱了工作区某个文件的内容，而且添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset</code>HEAD<code>&lt;file&gt;</code>，就回到了场景1，第二步按场景1操作</p>
<p>3.场景3：已经将修改提交到版本库时，想要撤销本次提交，只能通过版本回退来修改版本（不过前提是没有推送到远程库）</p>
</li>
</ul>
<h2 id="2-6删除文件"><a href="#2-6删除文件" class="headerlink" title="2.6删除文件"></a>2.6删除文件</h2><ul>
<li><p>首先，新建一个文本文件<code>test.txt</code>，内容随意，提交。一般是通过命令<code>rm test.txt</code>删除该文件。此时Git知道该文件已经删除了，故而工作区和版本库的文件就不一致了，<code>git status</code>命令会立刻告诉哪些文件被删除了</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124231804631.png" alt="image-20210124231804631"></p>
<p>现在有两个选择：</p>
<ul>
<li><p>要从版本库中删除该文件，那就用命令<code>git rm</code>删掉（与用<code>git add</code>效果一样），并且提交</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125101015857.png" alt="image-20210124232241633"></p>
<p>这样文件从版本库中删除了</p>
<p>如果直接用<code>git rm test.txt</code>删除文件而不用<code>rm test.txt</code>，那么该文件是无法恢复的。总之一句话：<code>git rm</code>命令直接从版本库中删除文件</p>
</li>
<li><p>删错了，因为版本库中还有，所以可以很轻松地把误删的文件恢复到最新版本</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124230438521.png" alt="image-20210124232846497"></p>
<p><code>git checkout -- test.txt</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”</p>
</li>
</ul>
</li>
</ul>
<pre><code>注意：没有被添加（`git add`）到版本库的文件，删除之后是无法恢复的！换言之，添加（`git add`）后的文件删除（非`git rm`）之后是可以恢复的
</code></pre><h1 id="3-远程仓库"><a href="#3-远程仓库" class="headerlink" title="3.远程仓库"></a>3.远程仓库</h1><h2 id="3-1关联PC主机与GitHub服务器"><a href="#3-1关联PC主机与GitHub服务器" class="headerlink" title="3.1关联PC主机与GitHub服务器"></a>3.1关联PC主机与GitHub服务器</h2><p>实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交</p>
<p>完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫GitHub神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的。所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库</p>
<p>由于Git仓库与GitHub仓库之间的传输是通过SSH加密的，所以需要进行一些设置：</p>
<p>1.创建SSH Key。在用户主目录下（C:\Users\29239），看看有没有<code>.ssh</code>目录。如果有，再看看有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果有，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），输入如下命令创建SSH Key：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>输入邮箱后，直接一路回车。如果一切顺利，可以在用户主目录里找到<code>.ssh</code>目录。里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210124232846497.png" alt="image-20210125101015857"></p>
<p>2.登录GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容。点“Add Key”，你就应该看到已经添加的Key：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125101217562.png" alt="image-20210125101217562"></p>
<p>当然，GitHub允许添加多个Key。假定有若干电脑，一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了</p>
<p>注意：在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去</p>
<p>如果不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是自己的Git服务器，所以别人也是看不见的</p>
<h2 id="3-2添加远程库"><a href="#3-2添加远程库" class="headerlink" title="3.2添加远程库"></a>3.2添加远程库</h2><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，一举多得</p>
<ul>
<li><p>首先，登录GitHub，然后点击左上角repository的new按钮，创建一个新的仓库。然后在Repository name填入<code>git1</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125104426601.png" alt="image-20210125102159633"></p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125102159633.png" alt="image-20210125102513346"></p>
<p>目前，GitHub上的这个<code>git1</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以 把一个已有的本地仓库与之关联 ，然后，把本地仓库的内容推送到GitHub仓库</p>
<p>现在，根据GitHub的提示，在本地的<code>git1</code>仓库下运行命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> remote add origin git@github.com:zhenyoung<span class="number">6</span>/git<span class="number">1</span>.git</span><br></pre></td></tr></table></figure>
<p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库</p>
<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>
<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是 把当前分支<code>master</code>推送到远程 </p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125105819675.png" alt="image-20210125104426601"></p>
<p>由于远程库是空的，第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令</p>
<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125102513346.png" alt="image-20210125104059199"></p>
<p>此后，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>
<p>把本地<code>master</code>分支的最新修改推送到GitHub</p>
</li>
<li><p>总结</p>
<p>1.要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code></p>
<p>2.关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容</p>
<p>此后，每次本地提交后，可以使用命令<code>git push origin master</code>推送最新修改</p>
<p>3.分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！而Git在有网络的时候，再把本地提交推送一下就完成了同步</p>
</li>
</ul>
<h2 id="3-3从远程库克隆"><a href="#3-3从远程库克隆" class="headerlink" title="3.3从远程库克隆"></a>3.3从远程库克隆</h2><p>上节中讲了先有本地库，后有远程库的时候，如何关联远程库。现在，假设从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆</p>
<ul>
<li><p>首先，登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>：</p>
<p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>在<code>desktop</code>目录下克隆一个本地库：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/1.png" alt="image-20210125105819675"></p>
<p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了</p>
<p>此外我们注意到，GitHub给出的地址不止一个，还可以用<code>https://github.com/zhenyoung6/gitskills.git</code>这样的地址</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/2.png" alt="image-20210125110223367"></p>
<p>实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code></p>
</li>
<li><p>总结</p>
<p>1.要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆</p>
<p>2.Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快</p>
</li>
</ul>
<h1 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4.分支管理"></a>4.分支管理</h1><h2 id="4-1创建与合并分支"><a href="#4-1创建与合并分支" class="headerlink" title="4.1创建与合并分支"></a>4.1创建与合并分支</h2><ul>
<li><p>在版本回退中，已经了解到：每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫做主分支，即<code>master</code>分支。 <code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code> ，<code>master</code>才是指向提交的。所以，<code>HEAD</code>指向的就是当前分支</p>
<p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/3.png"></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着不断提交，<code>master</code>分支的线也越来越长</p>
<p>当创建新的分支如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向与<code>master</code>相同的提交，再将<code>HEAD</code>改为指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125104059199.png"></p>
<p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，更改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/5.png"></p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。合并最简单的方法，就是将<code>master</code>指向 <code>dev</code>的当前提交 ，就完成了合并：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/4.png"></p>
<p>所以Git合并分支也很快！更改指针即可，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125110223367.png"></p>
</li>
<li><p>下面举一个例子</p>
<p>首先，创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b</span> dev</span><br></pre></td></tr></table></figure>
<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于两条命令：</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">git branch <span class="built_in">dev</span></span><br><span class="line">git checkout <span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<p>然后，用<code>git branch</code>命令查看当前分支：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125225049612.png" alt="image-20210125225049612"></p>
<p><code>git branch</code>命令会列出所有分支，当前分支前会标一个<code>*</code>号</p>
<p>然后，就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做修改，加上一行：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick.</span><br></pre></td></tr></table></figure>
<p>然后提交，之后切换回<code>master</code>分支：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br></pre></td></tr></table></figure>
<p>切换回<code>master</code>分支后，再查看<code>readme.txt</code>文件：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/6.png" alt="image-20210125225618044"></p>
<p>刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交并没有改变：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125230121019.png"></p>
<p>现在，将<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">merge</span> dev</span><br></pre></td></tr></table></figure>
<p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125230531420.png" alt="image-20210125230121019"></p>
<p>可以看到，和<code>dev</code>分支的最新提交是完全一样的</p>
<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快</p>
<p>当然，也不是每次合并都能<code>Fast-forward</code>，此处先按下不表，后面再提</p>
<p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git branch -d dev</span></span><br></pre></td></tr></table></figure>
<p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125233813834.png" alt="image-20210125230531420"></p>
<p> 因为创建、合并和删除分支非常快，所以Git鼓励使用分支完成某个任务，合并后再删掉分支，这与直接在<code>master</code>分支上工作效果是一样的，但过程更安全 </p>
</li>
<li><p>最新Git支持的<code>switch</code>命令</p>
<p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>。同一个命令，有两种作用，容易搞混且难以区分记忆</p>
<p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支</p>
<p>创建并切换到新的<code>dev</code>分支，可以使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">switch</span> -c dev</span><br></pre></td></tr></table></figure>
<p>直接切换到已有的<code>master</code>分支，可以使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">switch</span> master</span><br></pre></td></tr></table></figure>
<p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210125225618044.png" alt="image-20210125233813834"></p>
</li>
<li><p>总结</p>
<p>Git鼓励大量使用分支：</p>
<ol>
<li>查看分支：<code>git branch</code></li>
<li>创建分支：<code>git branch &lt;name&gt;</code></li>
<li>切换分支：<code>git checkout &lt;name&gt;</code></li>
<li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></li>
<li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li>
<li>删除分支：<code>git branch -d &lt;name&gt;</code></li>
</ol>
</li>
</ul>
<h2 id="4-2解决冲突"><a href="#4-2解决冲突" class="headerlink" title="4.2解决冲突"></a>4.2解决冲突</h2><ul>
<li><p>以下面一个例子说明冲突及如何解决冲突</p>
<p>创建新的分支：<code>git switch -c feature1</code></p>
<p>修改<code>readme.txt</code>最后一行，改为：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Crreating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick AND simple.</span><br></pre></td></tr></table></figure>
<p>然后在<code>feature1</code>分支上提交，然后切换到<code>master</code>分支：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126003723275.png" alt="image-20210126003723275"></p>
<p><code>Your branch is ahead of &#39;origin/master&#39; by 1 commit.</code>提示我们：当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交</p>
<p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick &amp; simple.</span><br></pre></td></tr></table></figure>
<p>然后在<code>master</code>分支上提交：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/branch1.png" alt="image-20210126004422409"></p>
<p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126004422409.png"></p>
</li>
</ul>
<p>  此时，Git无法执行“快速合并”，只能试图把各自的修改合并起来，若执行合并命令：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126005635204.png" alt="image-20210126005635204"></p>
<p>  可以发现：合并出现冲突且冲突出现在<code>readme.txt</code>文件中，必须解决冲突后提交</p>
<p>  <code>git status</code>也说明了冲突的文件：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126010007855.png" alt="image-20210126010007855"></p>
<p>  查看<code>readme.txt</code>的内容：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/branch2.png" alt="image-20210126010235214"></p>
<p>  Git中使用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出分支之间相异的内容</p>
<p>  将<code>“年轻人不讲武德”</code>一句后修改为一行：</p>
  <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> quick and simple.</span><br></pre></td></tr></table></figure>
<p>  提交之后，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>
<p>  <img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126010748786.png"></p>
<p>  用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126010235214.png" alt="image-20210126010748786"></p>
<ul>
<li><p>总结</p>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成</p>
<p>而解决冲突就是把Git合并失败的多份文件手动编辑为我们希望的内容，再提交</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图</p>
</li>
</ul>
<h2 id="4-3分支管理策略"><a href="#4-3分支管理策略" class="headerlink" title="4.3分支管理策略"></a>4.3分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge合并时生成一个新的commit提交，这样，从分支历史上就可以看出分支信息。</p>
<ul>
<li><p>下面举一个例子说明一下分支管理</p>
<p>首先，仍然创建并切换<code>dev</code>分支，修改<code>readme.txt</code>文件，并提交一个新的<code>commit</code>，然后切换回<code>master</code>。然后输入以下命令合并<code>dev</code>分支：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> merge --<span class="literal">no</span>-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br></pre></td></tr></table></figure>
<p><code>--no-ff</code>参数，表示禁用<code>Fast forward</code></p>
<p>因为本次合并要创建一个新的<code>commit</code>，所以要加上<code>-m</code>参数，把<code>commit</code>描述写进去</p>
<p>合并后，用<code>git log</code>查看分支历史：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/fast forward1.png" alt="image-20210126013421958"></p>
<p>可以看到，不使用<code>Fast forward</code>模式，<code>merge</code>后就像这样：</p>
</li>
</ul>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126013421958.png"></p>
<ul>
<li><p>分支策略</p>
<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img src = "https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/fast forward.png"></p>
</li>
<li><p>总结</p>
<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并</p>
</li>
</ul>
<h2 id="4-4Bug分支"><a href="#4-4Bug分支" class="headerlink" title="4.4Bug分支"></a>4.4Bug分支</h2><h2 id="4-5Feature分支"><a href="#4-5Feature分支" class="headerlink" title="4.5Feature分支"></a>4.5Feature分支</h2><h2 id="4-6多人协作"><a href="#4-6多人协作" class="headerlink" title="4.6多人协作"></a>4.6多人协作</h2><h2 id="4-7Rebase"><a href="#4-7Rebase" class="headerlink" title="4.7Rebase"></a>4.7Rebase</h2><h1 id="5-标签管理"><a href="#5-标签管理" class="headerlink" title="5.标签管理"></a>5.标签管理</h1><p>标签<code>tag</code>就是一个让人容易记住的有意义的名字，它跟某个<code>commit</code>绑在一起。可以理解为：每个tag就对应着1个版本的<code>commit</code></p>
<ul>
<li><p>创建标签</p>
<p>首先，切换到需要打标签的分支上。然后，用命令<code>git tag &lt;name&gt;</code>就可以打一个新标签。可以用命令<code>git tag</code>查看所有标签：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126154130846.png" alt="image-20210126152723642"></p>
<p>默认标签是打在最新提交的<code>commit</code>上的。有时候，如果忘了打标签，比如，现在已经是周五了，但本应该在周一打的标签没有打，怎么办？</p>
<p>方法是找到历史提交的commit id，然后打上就可以了：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126154211177.png" alt="image-20210126153713606"></p>
<p>若要对最近的<code>conflict fixed</code>这次提交打标签，它对应的commit id是<code>5c03c59</code>，用命令<code>git tag v0.9 5c03c59</code>，然后再用<code>git tag</code>查看标签</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126152723642.png" alt="image-20210126154130846"></p>
<p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126154444485.png" alt="image-20210126154211177"></p>
<p>可以看到，<code>v0.9</code>确实打在<code>conflict fixed</code>这次提交上</p>
<p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> tag -a v<span class="number">0</span>.<span class="number">1</span> -m <span class="string">&quot;version 0.1 released&quot;</span> d<span class="number">22</span>cb<span class="number">3</span>a</span><br></pre></td></tr></table></figure>
<p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126153713606.png" alt="image-20210126154444485"></p>
<p>注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p>
</li>
<li><p>操作标签</p>
<p>如果标签打<code>v0.1</code>错了，也可以用命令<code>git tag -d v0.1</code>删除。因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除</p>
<p>如果要推送某个标签到远程，使用命令<code>git push origin v0.1</code></p>
<p>或者，一次性推送全部尚未推送到远程的本地标签<code>git push origin --tags</code></p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126160958026.png" alt="image-20210126160150241"></p>
<p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除<code>git tag -d v0.9</code>。然后，从远程删除<code>git push origin :refs/tags/v0.9</code></p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126160150241.png" alt="image-20210126161432619"></p>
<p>若要查看是否真的从远程库删除了标签，可以登陆GitHub查看是否真的从远程库删除了标签</p>
<p>以下删除了v0.9，还剩v1.0和v0.1版本</p>
<p><img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126160925273.png" alt="image-20210126160925273"></p>
</li>
</ul>
<p>  以下删除了v0.1，还剩v1.0版本</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126161128493.png" alt="image-20210126160958026"></p>
<p>  以下删除了最后的v1.0版本</p>
<p>  <img src="https://pic-blogs.oss-cn-beijing.aliyuncs.com/img/image-20210126161432619.png" alt="image-20210126161128493"></p>
<ul>
<li><p>总结</p>
<ol>
<li><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</p>
</li>
<li><p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息</p>
</li>
<li>命令<code>git tag</code>可以查看所有标签</li>
<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li>
</ol>
</li>
</ul>
<h1 id="6-使用GitHub"><a href="#6-使用GitHub" class="headerlink" title="6.使用GitHub"></a>6.使用GitHub</h1><h1 id="7-使用Gitee"><a href="#7-使用Gitee" class="headerlink" title="7.使用Gitee"></a>7.使用Gitee</h1><h1 id="8-自定义Git"><a href="#8-自定义Git" class="headerlink" title="8.自定义Git"></a>8.自定义Git</h1><h1 id="9-使用SourceTree"><a href="#9-使用SourceTree" class="headerlink" title="9.使用SourceTree"></a>9.使用SourceTree</h1>]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
